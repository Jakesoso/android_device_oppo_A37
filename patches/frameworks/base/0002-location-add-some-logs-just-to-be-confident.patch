From f19189f89c5a9c77c3f8635117c739126f6a25d0 Mon Sep 17 00:00:00 2001
From: Wang Xuerui <idontknw.wang@gmail.com>
Date: Fri, 28 Aug 2015 05:35:12 +0800
Subject: [PATCH 2/5] location: add some logs, just to be confident

you know, this is MTK...

Change-Id: Ie16cdec573d24f1a23d09ddb3b864c4fcec8e39d
---
 ...android_server_location_GpsLocationProvider.cpp | 35 ++++++++++++++++++++--
 1 file changed, 32 insertions(+), 3 deletions(-)

diff --git a/services/core/jni/com_android_server_location_GpsLocationProvider.cpp b/services/core/jni/com_android_server_location_GpsLocationProvider.cpp
index 49727e9..84d17b9 100644
--- a/services/core/jni/com_android_server_location_GpsLocationProvider.cpp
+++ b/services/core/jni/com_android_server_location_GpsLocationProvider.cpp
@@ -491,12 +491,15 @@ static void android_location_GpsLocationProvider_class_init_native(JNIEnv* env,
             "(Landroid/location/GpsNavigationMessageEvent;)V");
 
     err = hw_get_module(GPS_HARDWARE_MODULE_ID, (hw_module_t const**)&module);
+    ALOGV("hw_get_module err=%d module=%p", err, module);
     if (err == 0) {
         hw_device_t* device;
         err = module->methods->open(module, GPS_HARDWARE_MODULE_ID, &device);
+        ALOGV("module->methods->open err=%d device=%p", err, device);
         if (err == 0) {
             gps_device_t* gps_device = (gps_device_t *)device;
             sGpsInterface = gps_device->get_gps_interface(gps_device);
+            ALOGV("gps_device->get_gps_interface() = %p", sGpsInterface);
         }
     }
     if (sGpsInterface) {
@@ -521,6 +524,16 @@ static void android_location_GpsLocationProvider_class_init_native(JNIEnv* env,
             (const GnssConfigurationInterface*)sGpsInterface->get_extension(
                     GNSS_CONFIGURATION_INTERFACE);
     }
+
+    ALOGV("sGpsXtraInterface = %p", sGpsXtraInterface);
+    ALOGV("sAGpsInterface = %p", sAGpsInterface);
+    ALOGV("sGpsNiInterface = %p", sGpsNiInterface);
+    ALOGV("sGpsDebugInterface = %p", sGpsDebugInterface);
+    ALOGV("sAGpsRilInterface = %p", sAGpsRilInterface);
+    ALOGV("sGpsGeofencingInterface = %p", sGpsGeofencingInterface);
+    ALOGV("sGpsMeasurementInterface = %p", sGpsMeasurementInterface);
+    ALOGV("sGpsNavigationMessageInterface = %p", sGpsNavigationMessageInterface);
+    ALOGV("sGnssConfigurationInterface = %p", sGnssConfigurationInterface);
 }
 
 static jboolean android_location_GpsLocationProvider_is_supported(JNIEnv* env, jclass clazz) {
@@ -533,18 +546,34 @@ static jboolean android_location_GpsLocationProvider_is_supported(JNIEnv* env, j
 
 static jboolean android_location_GpsLocationProvider_init(JNIEnv* env, jobject obj)
 {
+    ALOGV("GpsLocationProvider_init");
     // this must be set before calling into the HAL library
     if (!mCallbacksObj)
         mCallbacksObj = env->NewGlobalRef(obj);
 
     // fail if the main interface fails to initialize
-    if (!sGpsInterface || sGpsInterface->init(&sGpsCallbacks) != 0)
+    int ret;
+
+    ALOGV("init: sGpsInterface=%p sGpsXtraInterface=%p", sGpsInterface, sGpsXtraInterface);
+    if (sGpsInterface) {
+        ret = sGpsInterface->init(&sGpsCallbacks);
+        ALOGV("init: sGpsInterface->init() ret=%d", ret);
+        if (ret != 0) {
+            return JNI_FALSE;
+        }
+    } else {
         return JNI_FALSE;
+    }
 
     // if XTRA initialization fails we will disable it by sGpsXtraInterface to NULL,
     // but continue to allow the rest of the GPS interface to work.
-    if (sGpsXtraInterface && sGpsXtraInterface->init(&sGpsXtraCallbacks) != 0)
-        sGpsXtraInterface = NULL;
+    if (sGpsXtraInterface) {
+        ret = sGpsXtraInterface->init(&sGpsXtraCallbacks);
+        ALOGV("init: sGpsXtraInterface->init() ret=%d", ret);
+        if (ret != 0) {
+            sGpsXtraInterface = NULL;
+        }
+    }
     if (sAGpsInterface)
         sAGpsInterface->init(&sAGpsCallbacks);
     if (sGpsNiInterface)
-- 
1.9.1

