From 63c8926691ad2fe6da78c7765fdc22f10f47440f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E7=A7=8B=E5=8F=B6=E9=9A=8F=E9=A3=8Eivan?=
 <yanziily@gmail.com>
Date: Sat, 26 Dec 2015 16:22:07 +0800
Subject: [PATCH 1/2] add com.mediatek for build
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: If5107e4f9040aeb4353afdbacd5692055a1d3388
Signed-off-by: 秋叶随风ivan <yanziily@gmail.com>
---
 core/java/com/mediatek/xlog/BLog.java       |  62 ++++++++++++++
 core/java/com/mediatek/xlog/BLogPacker.java | 111 ++++++++++++++++++++++++
 core/java/com/mediatek/xlog/SXlog.java      |  82 ++++++++++++++++++
 core/java/com/mediatek/xlog/Xlog.java       | 125 ++++++++++++++++++++++++++++
 4 files changed, 380 insertions(+)
 create mode 100755 core/java/com/mediatek/xlog/BLog.java
 create mode 100755 core/java/com/mediatek/xlog/BLogPacker.java
 create mode 100755 core/java/com/mediatek/xlog/SXlog.java
 create mode 100755 core/java/com/mediatek/xlog/Xlog.java

diff --git a/core/java/com/mediatek/xlog/BLog.java b/core/java/com/mediatek/xlog/BLog.java
new file mode 100755
index 0000000..ea8c450
--- /dev/null
+++ b/core/java/com/mediatek/xlog/BLog.java
@@ -0,0 +1,62 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein is
+ * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
+ * the prior written permission of MediaTek inc. and/or its licensors, any
+ * reproduction, modification, use or disclosure of MediaTek Software, and
+ * information contained herein, in whole or in part, shall be strictly
+ * prohibited.
+ *
+ * MediaTek Inc. (C) 2010. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
+ * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
+ * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
+ * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
+ * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
+ * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
+ * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
+ * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
+ * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
+ * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
+ * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
+ * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
+ * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
+ * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
+ * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek
+ * Software") have been modified by MediaTek Inc. All revisions are subject to
+ * any receiver's applicable license agreements with MediaTek Inc.
+ */
+
+package com.mediatek.xlog;
+
+public class BLog {
+
+    /** @hide */ public static native int v(String tag, int hashValue);
+
+    /** @hide */ public static native int d(String tag, int hashValue);
+
+    /** @hide */ public static native int i(String tag, int hashValue);
+
+    /** @hide */ public static native int w(String tag, int hashValue);
+
+    /** @hide */ public static native int e(String tag, int hashValue);
+
+    /** @hide */ public static native int v(String tag, int hashValue, BLogPacker packer);
+
+    /** @hide */ public static native int d(String tag, int hashValue, BLogPacker packer);
+
+    /** @hide */ public static native int i(String tag, int hashValue, BLogPacker packer);
+
+    /** @hide */ public static native int w(String tag, int hashValue, BLogPacker packer);
+
+    /** @hide */ public static native int e(String tag, int hashValue, BLogPacker packer);
+
+};
diff --git a/core/java/com/mediatek/xlog/BLogPacker.java b/core/java/com/mediatek/xlog/BLogPacker.java
new file mode 100755
index 0000000..e1033fd
--- /dev/null
+++ b/core/java/com/mediatek/xlog/BLogPacker.java
@@ -0,0 +1,111 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein is
+ * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
+ * the prior written permission of MediaTek inc. and/or its licensors, any
+ * reproduction, modification, use or disclosure of MediaTek Software, and
+ * information contained herein, in whole or in part, shall be strictly
+ * prohibited.
+ *
+ * MediaTek Inc. (C) 2010. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
+ * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
+ * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
+ * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
+ * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
+ * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
+ * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
+ * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
+ * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
+ * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
+ * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
+ * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
+ * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
+ * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
+ * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek
+ * Software") have been modified by MediaTek Inc. All revisions are subject to
+ * any receiver's applicable license agreements with MediaTek Inc.
+ */
+
+package com.mediatek.xlog;
+
+public class BLogPacker {
+
+    private long binBuf;
+
+    private int index;
+
+    public BLogPacker() {
+    binBuf = initBinaryBuffer();
+    index = 0;
+    }
+
+    public BLogPacker append(boolean b) {
+    index = writeBoolean(binBuf, index, b);
+    return this;
+    }
+
+    public BLogPacker append(char cValue) {
+    index = writeChar(binBuf, index, cValue);
+    return this;
+    }
+
+    public BLogPacker append(double dValue) {
+    index = writeDouble(binBuf, index, dValue);
+    return this;
+    }
+
+    public BLogPacker append(float fValue) {
+    index = writeDouble(binBuf, index, fValue);
+    return this;
+    }
+
+    public BLogPacker append(int intValue) {
+    index = writeInt(binBuf, index, intValue);
+    return this;
+    }
+
+    public BLogPacker append(long lng) {
+    index = writeLong(binBuf, index, lng);
+    return this;
+    }
+
+    public BLogPacker append(String s) {
+    index = writeString(binBuf, index, s);
+    return this;
+    }
+
+    public BLogPacker append(Object o) {
+    if (o != null) {
+        index = writeString(binBuf, index, o.toString());
+    }
+    else {
+        index = writeString(binBuf, index, "null");
+    }
+    return this;
+    }
+
+    protected native void finalize();
+
+    private static native long initBinaryBuffer();
+
+    private static native int writeBoolean(long binBuf, int index, boolean value);
+
+    private static native int writeChar(long binBuf, int index, char value);
+
+    private static native int writeInt(long binBuf, int index, int value);
+
+    private static native int writeLong(long binBuf, int index, long value);
+
+    private static native int writeString(long binBuf, int ndex, String value);
+
+    private static native int writeDouble(long binBuf, int index, double value);
+}
diff --git a/core/java/com/mediatek/xlog/SXlog.java b/core/java/com/mediatek/xlog/SXlog.java
new file mode 100755
index 0000000..0d29865
--- /dev/null
+++ b/core/java/com/mediatek/xlog/SXlog.java
@@ -0,0 +1,82 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein is
+ * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
+ * the prior written permission of MediaTek inc. and/or its licensors, any
+ * reproduction, modification, use or disclosure of MediaTek Software, and
+ * information contained herein, in whole or in part, shall be strictly
+ * prohibited.
+ * 
+ * MediaTek Inc. (C) 2010. All rights reserved.
+ * 
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
+ * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
+ * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
+ * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
+ * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
+ * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
+ * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
+ * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
+ * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
+ * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
+ * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
+ * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
+ * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
+ * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
+ * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek
+ * Software") have been modified by MediaTek Inc. All revisions are subject to
+ * any receiver's applicable license agreements with MediaTek Inc.
+ */
+
+package com.mediatek.xlog;
+
+import android.util.Log;
+
+public final class SXlog {
+    public static int v(String tag, String msg) {
+        return Xlog.println_native(Log.LOG_ID_SYSTEM, Log.VERBOSE, tag, msg);
+    }
+
+    public static int v(String tag, String msg, Throwable tr) {
+        return Xlog.println_native(Log.LOG_ID_SYSTEM, Log.VERBOSE, tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+
+    public static int d(String tag, String msg) {
+        return Xlog.println_native(Log.LOG_ID_SYSTEM, Log.DEBUG, tag, msg);
+    }
+
+    public static int d(String tag, String msg, Throwable tr) {
+        return Xlog.println_native(Log.LOG_ID_SYSTEM, Log.DEBUG, tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+
+    public static int i(String tag, String msg) {
+        return Xlog.println_native(Log.LOG_ID_SYSTEM, Log.INFO, tag, msg);
+    }
+
+    public static int i(String tag, String msg, Throwable tr) {
+        return Xlog.println_native(Log.LOG_ID_SYSTEM, Log.INFO, tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+
+    public static int w(String tag, String msg) {
+        return Xlog.println_native(Log.LOG_ID_SYSTEM, Log.WARN, tag, msg);
+    }
+
+    public static int w(String tag, String msg, Throwable tr) {
+        return Xlog.println_native(Log.LOG_ID_SYSTEM, Log.WARN, tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+
+    public static int e(String tag, String msg) {
+        return Xlog.println_native(Log.LOG_ID_SYSTEM, Log.ERROR, tag, msg);
+    }
+
+    public static int e(String tag, String msg, Throwable tr) {
+        return Xlog.println_native(Log.LOG_ID_SYSTEM, Log.ERROR, tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+}
diff --git a/core/java/com/mediatek/xlog/Xlog.java b/core/java/com/mediatek/xlog/Xlog.java
new file mode 100755
index 0000000..effcef7
--- /dev/null
+++ b/core/java/com/mediatek/xlog/Xlog.java
@@ -0,0 +1,125 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein is
+ * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
+ * the prior written permission of MediaTek inc. and/or its licensors, any
+ * reproduction, modification, use or disclosure of MediaTek Software, and
+ * information contained herein, in whole or in part, shall be strictly
+ * prohibited.
+ * 
+ * MediaTek Inc. (C) 2010. All rights reserved.
+ * 
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
+ * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
+ * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
+ * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
+ * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
+ * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
+ * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
+ * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
+ * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
+ * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
+ * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
+ * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
+ * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
+ * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
+ * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek
+ * Software") have been modified by MediaTek Inc. All revisions are subject to
+ * any receiver's applicable license agreements with MediaTek Inc.
+ */
+
+package com.mediatek.xlog;
+
+import android.util.Log;
+
+public final class Xlog {
+		/**
+			* API for verbose log.
+			* @internal
+			*/
+    public static int v(String tag, String msg) {
+        return println_native(Log.LOG_ID_MAIN, Log.VERBOSE, tag, msg);
+    }
+
+    /**
+			* API for verbose log.
+			* @internal
+			*/
+    public static int v(String tag, String msg, Throwable tr) {
+        return println_native(Log.LOG_ID_MAIN, Log.VERBOSE, tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+
+    /**
+			* API for debug log.
+			* @internal
+			*/
+    public static int d(String tag, String msg) {
+        return println_native(Log.LOG_ID_MAIN, Log.DEBUG, tag, msg);
+    }
+
+    /**
+			* API for debug log.
+			* @internal
+			*/
+    public static int d(String tag, String msg, Throwable tr) {
+        return println_native(Log.LOG_ID_MAIN, Log.DEBUG, tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+
+    /**
+			* API for info log.
+			* @internal
+			*/
+    public static int i(String tag, String msg) {
+        return println_native(Log.LOG_ID_MAIN, Log.INFO, tag, msg);
+    }
+
+    /**
+			* API for info log.
+			* @internal
+			*/
+    public static int i(String tag, String msg, Throwable tr) {
+        return println_native(Log.LOG_ID_MAIN, Log.INFO, tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+
+    /**
+			* API for info log.
+			* @internal
+			*/
+    public static int w(String tag, String msg) {
+        return println_native(Log.LOG_ID_MAIN, Log.WARN, tag, msg);
+    }
+
+    /**
+			* API for warning log.
+			* @internal
+			*/
+    public static int w(String tag, String msg, Throwable tr) {
+        return println_native(Log.LOG_ID_MAIN, Log.WARN, tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+
+    /**
+			* API for warning log.
+			* @internal
+			*/
+    public static int e(String tag, String msg) {
+        return println_native(Log.LOG_ID_MAIN, Log.ERROR, tag, msg);
+    }
+
+    /**
+			* API for verbose log.
+			* @internal
+			*/
+    public static int e(String tag, String msg, Throwable tr) {
+        return println_native(Log.LOG_ID_MAIN, Log.ERROR, tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+
+    /** @hide */ public static native int println_native(int bufID,
+            int priority, String tag, String msg);
+}
-- 
1.9.1

